-
  Set de Pruebas para el Plan de Contratacion
-
  Crear plan de contratacion
-
  !record {model: plan_contratacion_idu.plan, id: plan_1}:
    vigencia: '1978'
-
  !assert {model: plan_contratacion_idu.plan, id: plan_1, string: Verificando los valores por defecto}:
    - state == 'inicial'
    - active == True
    - open_close_plan == True
    - version == 1
    - total_pagos_presupuestado_plan == 0
    - total_pagos_programados_plan == 0
    - total_rezago_plan == 0
-
  Adicionar plan item
-
  !record {model: plan_contratacion_idu.item, id: plan_item_1}:
    plan_id: plan_1
    clasificacion_id: clasificador_proyectos_1
    dependencia_id: dependencia_1
    fuente_id: fuente_1
    tipo_proceso_id: tipo_proceso_1
    tipo_proceso_seleccion_id: tipo_proceso_seleccion_1
    localizacion: 'localidad'
    description: 'esto es una prueba'
    presupuesto: 50000000
    plazo_de_ejecucion: 1
    no_aplica_unidad_mf: True
-
  Probar el item
-
  !assert {model: plan_contratacion_idu.item, id: plan_item_1, string: Verificando los valores por defecto del item}:
    - state == 'version_inicial'
    - total_pagos_programados == 0
    - total_pagos_realizados == 0
-
  Probar el plan luego del item
-
  !assert {model: plan_contratacion_idu.plan, id: plan_1, string: Verificando plan luego de adicionar item}:
    - state == 'inicial'
    - total_pagos_presupuestado_plan == 50000000
    - total_pagos_programados_plan == 0
    - total_rezago_plan == 50000000
-
  Intentar aprobar el item del plan incompleto
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_aprobado([ref('plan_item_1')], 0)
      assert False, "No se debe permitir pasar a estado aprobado"
    except:
      assert True, "Exception lanzada para no pasar al estado aprobado"
-
  Completar el objeto y pasarlo a aprobado
-
  !record {model: plan_contratacion_idu.item, id: plan_item_1}:
    codigo_unspsc: 'codigo_unspsc'
    centro_costo_id: centro_costo_1
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_aprobado([ref('plan_item_1')], 0)
      assert True, "Cambiado a estado aprobado"
    except:
      assert False, "Exception lanzada para no pasar al estado aprobado"
-
  Adicionar un pago programado al plan item
-
  !record {model: plan_contratacion_idu.plan_pagos_item, id: plan_pagos_item_1}:
    mes: 8
    valor: 30000000
    plan_contratacion_item_id: plan_item_1
-
  Probar los totales de pagos programados luego de ingresar un pago programado al item
-
  !assert {model: plan_contratacion_idu.item, id: plan_item_1, string: Verificando item luego de adicionar pago programado al item}:
    - total_pagos_programados == 30000000
    - presupuesto_rezago == 20000000
-
  Adicionar un giro al plan item
-
  !record {model: plan_contratacion_idu.plan_pagos_giro, id: plan_pagos_giro_1}:
    date: 2013-02-10
    valor: 20000000
    plan_contratacion_item_id: plan_item_1
-
  Probar el total_pagos_realizados luego de ingresar un giro al item
-
  !assert {model: plan_contratacion_idu.item, id: plan_item_1, string: Verificando item luego de adicionar pago realizado al item}:
    - total_pagos_realizados == 20000000
-
 Intentar cambiar el estado del item a radicado sin los datos del radicado orfeo
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_radicado([ref('plan_item_1')], 0)
      assert False, "No se debe permitir pasar a estado radicado"
    except:
      assert True, "Exception lanzada para no pasar al estado radicado"
-
  Completar el objeto y pasarlo a radicado
-
  !record {model: plan_contratacion_idu.item, id: plan_item_1}:
    numero_orfeo: '20145260001301'
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_radicado([ref('plan_item_1')], 0)
      assert True, "Cambiado a estado radicado"
    except:
      assert False, "Exception lanzada para no pasar al estado radicado"
-
 Intentar cambiar el estado del item a contrato suscrito sin los datos del contrato
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_suscrito([ref('plan_item_1')], 0)
      assert False, "No se debe permitir pasar a estado contrato suscrito"
    except:
      assert True, "Exception lanzada para no pasar al estado contrato suscrito"
-
  Completar el objeto y pasarlo a contrato suscrito
-
  !record {model: plan_contratacion_idu.item, id: plan_item_1}:
    numero_contrato: 'IDU-1916-2013'
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_suscrito([ref('plan_item_1')], 0)
      assert True, "Cambiado a estado contrato suscrito"
    except:
      assert False, "Exception lanzada para no pasar al estado contrato suscrito"
-
  Intentar cambiar el estado del item a ejecucion sin los datos de fecha de acta de inicio
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_suscrito([ref('plan_item_1')], 0)
      assert False, "No se debe permitir pasar a estado ejecucion"
    except:
      assert True, "Exception lanzada para no pasar al estado ejecucion"
-
  Completar el objeto y pasarlo a estado en Ejecucion
-
  !record {model: plan_contratacion_idu.item, id: plan_item_1}:
    fecha_acta_inicio: 2013-12-24
-
  !python {model: plan_contratacion_idu.item}: |
    item = self.browse(cr, uid, ref("plan_item_1"))
    try:
      item.wkf_ejecucion([ref('plan_item_1')], 0)
      assert True, "Cambiado a estado en Ejecucion"
    except:
      assert False, "Exception lanzada para no pasar al estado en Ejecucion"